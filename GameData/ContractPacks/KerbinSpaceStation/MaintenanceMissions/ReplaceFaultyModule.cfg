CONTRACT_TYPE
{
    name = ReplaceFaultyModule
    title = Replace a faulty Power Module on @/targetVessel1
	genericTitle = Replace a faulty Power Module
    description = Telemetry indicates that the power module on @/targetVessel1 is about to fail, go and replace it.
	genericDescription = Telemetry indicates that a power module is about to fail, go and replace it.
    synopsis = Launch a new Power Module for @/targetVessel1
    completedMessage = The new module is in place. Good job!
    minExpiry = 1
    maxExpiry = 7
	group = BasesandStations
    cancellable = true
    declinable = true
    rewardScience = 0
    rewardReputation = Random(1.0, 20.0)
    rewardFunds = Random(40000.0, 60000.0)
    failureReputation = Random(1.0, 10.0)
    failureFunds = Random(1.0, 10000.0)
    advanceFunds = Random(1.0, 10000.0)
	targetBody = @/targetBody1
	
	DATA
    {
        type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).SelectUnique()
		title = Must have a space station with crew in orbit
    }
	
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}

	PARAMETER
	{
		name = PowerModule
		type = VesselParameterGroup
		title = It should be self sustaining and docked to @/targetVessel1.
		//make sure the module has some form of power generation.
		
		PARAMETER
		{
			name = RTGSolar
			type = Any
			title = Have one of the following power generators
			
			PARAMETER
			{
				name = PartValidationSolar
				type = PartValidation
				// PartModule(s) to check for.  Optional, and can be specified multiple times.
				partModule = ModuleDeployableSolarPanel
				// Minimum count, default = 1
				minCount = 1
				title = 1 or more solar panels
			}
			
			PARAMETER
			{
				name = PartValidationRTG
				type = PartValidation
				partModule = ModuleGenerator
				minCount = 1
				title = 1 or more generators
			}
			
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidationNearFutureSolar
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				minCount = 1
				title = 1 or more curved solar panels
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNearFutureReactors
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = true
				partModule = FissionReactor
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNearFutureRTGs
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = true
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidationSolar
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Docking
			type = Docking

			vessel = @/targetVessel1
			title = Dock with @/targetVessel1
			completeInSequence = true
		}
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		checkOnActiveContract = false
		contractType = ReplaceFaultyModule
		minCount = 0
		cooldownDuration = 30d
		//title = Must not have completed contract in last 30 days.
	}

	REQUIREMENT
	{
		name = StationCheck
		type = Expression
		checkOnActiveContract = false
		title = Station must be in orbit
		expression = (@/targetVessel1.IsOrbiting())
	}
	REQUIREMENT
	{
		name = RandomRoll
		type = Expression
		checkOnActiveContract = false
		expression = @BasesandStations:randomRoll <3
		title = The RNG must like you
	}
}
