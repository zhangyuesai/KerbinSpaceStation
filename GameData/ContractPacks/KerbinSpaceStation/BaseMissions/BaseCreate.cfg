CONTRACT_TYPE
{
	name = BaseCreate	  
    title = Base Creation on @/targetBody1 
    group = BasesandStations
	description = Our engineers were thinking on a way to have kerbals on @/targetBody1 and let them stay there long term. So that is why we need you.
    notes = Put a new base on the @targetBody1 surface near the Rover.
	genericTitle = Build an Offworld Base
	genericDescription = Our engineers were thinking on a way to have kerbals on other worlds and let them stay there long term.
    synopsis = We want you to start the creation of @/targetBody1 Base.   
    completedMessage = You have created the initial stage of @/targetBody1 Base.
    minExpiry = 1.0
    maxExpiry = 7.0
    cancellable = true
    declinable = true 
    autoAccept = false
    targetBody = @/targetBody1
	maxSimultaneous = 1 
    rewardScience = 0.0
    rewardReputation = 5.0
    rewardFunds = Random(40000, 60000)
    failureReputation = 10.00
    failureFunds = 100000.0
    advanceFunds = 1000.0
    DATA	
    {
	    type = Vessel
		uniquenessCheck = CONTRACT_ACTIVE
		requiredValue = true
        targetVessel1 = [ BaseRover ].Where(v => v.IsLanded()).Random()
		title = Must have a scout rover deployed
	}
	DATA
	{
        type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
    }
	DATA
	{
        type = Location
		vesselLocation = @/targetVessel1.Location()
		hidden = true
    }
    BEHAVIOUR
    {
        name = WaypointGenerator
		type = WaypointGenerator
		WAYPOINT
        {    name = Base Landing Spot
		     targetBody = @/targetBody1
			 icon = balloon
			 altitude = 0.0
			 latitude = @/vesselLocation.Latitude()
			 longitude = @/vesselLocation.Longitude()
        }
    }
	
	BEHAVIOUR
{
    name = Expression
    type = Expression
	    CONTRACT_COMPLETED_FAILURE
    {
        type = bool
		BaseConstruction = false
	}
		    CONTRACT_COMPLETED_SUCCESS
    {
        type = bool
		BaseConstruction = false
	}
}
PARAMETER
{
name = All
type = All
	    PARAMETER
        {
            name = HabModule
            type = HasCrewCapacity        
            minCapacity = 4
            title = Support 4 Kerbals
			hideChildren = true
        }
		
		PARAMETER
        {
            name = Any
			type = Any
			hideChildren = true		
			title = Can Generate Power (supports all stock methods and Near Future Solar/Electrical)
			PARAMETER
			{
                name = Solar
				title = 1 or more solar panels
				type = PartValidation
				hideChildren = true
				partModule = ModuleDeployableSolarPanel
				minCount = 1 	     
			}
			PARAMETER:NEEDS[Kopernicus]
			{
                name = Solar
				title = 1 or more solar panels
				type = PartValidation
				hideChildren = true
				partModule = KopernicusSolarPanel
				minCount = 1 	     
			}
			PARAMETER
			{
                name = Generator
				title = 1 or more RTGs
				type = PartValidation
				hideChildren = true
				partModule = ModuleGenerator
				minCount = 1 
			}
			PARAMETER
			{
                name = Generator1
				title = 1 or more Fuel Cells
				type = PartValidation
				hideChildren = true
				part = FuelCell
				minCount = 1 	
			}
			PARAMETER
			{
                name = Generator2
				title = 1 or more Fuel Cell Arrays
				type = PartValidation
				hideChildren = true
				part = FuelCellArray
				minCount = 1
			}
			PARAMETER:NEEDS[NearFutureSolar]
			{
			name = PartValidationNearFutureSolar
			type = PartValidation
			title = 1 or more curved solar panels
			hideChildren = true
			partModule = ModuleCurvedSolarPanel
			minCount = 1
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
			name = PartValidationNearFutureReactors
			type = PartValidation
			title = 1 or more fission reactors
			hideChildren = true
			partModule = FissionReactor
			minCount = 1
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
			name = PartValidationNearFutureRTGs
			type = PartValidation
			title = 1 or more radioisotope generators
			hideChildren = true
			partModule = ModuleRadioisotopeGenerator
			minCount = 1
			}
		}		
    PARAMETER
    {
        name = VisitWaypoint
		type = VisitWaypoint
		index = 0
		distance = 2000.0
		title = Land near @/targetBody1 Rover
		showMessages = true
	}
	PARAMETER
{
    name = ReachState
    type = ReachState
	hidden = true
	hideChildren = true
	situation = LANDED
	situation = SPLASHED
}
PARAMETER
{
    name = VesselIsType
    type = VesselIsType
	vesselType = Base
}
}
	
	REQUIREMENT
	{
		name = BaseConstruct
		type = Expression
		checkOnActiveContract = false
		expression = ($BaseConstruction == true)
		title = Must not be constructing another base
	}
	
	REQUIREMENT
	{
		name = Scanner
		type = Expression
		checkOnActiveContract = false
		expression = (!@/targetBody1.IsHomeWorld())
		title = Base must not be on the homeworld
	}
}
