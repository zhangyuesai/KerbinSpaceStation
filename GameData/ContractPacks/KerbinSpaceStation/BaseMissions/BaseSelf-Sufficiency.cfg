CONTRACT_TYPE:NEEDS[TACLifeSupport|USILifeSupport|Snacks]
{
    name = BaseSelfSufficiency
    title = Life Support Expansion for @/LSTarget
	genericTitle = Base Life Support Expansion
    group = BasesandStations
	description = Some kerbals down there on @/LSTarget are complaining about their dependence on the ressuply vessels so this is where you come in.
	genericDescription = We don't want to be relying on resupply ships. Make the base self-sufficient.
    synopsis = Add a new Self-sufficiency module to @/LSTarget.
    completedMessage = Finally our Kerbals aren't complaining.
    minExpiry = 1
    maxExpiry = 7
    cancellable = true
    declinable = true
	maxSimultaneous = 1
    rewardScience = 0.0
    rewardReputation = Random(1.0, 2.0)
    rewardFunds = Random(40000, 60000.0)
    failureReputation = Random(1, 10.0)
    failureFunds = Random(1, 10000.0)
    advanceFunds = Random(1, 10000.0)
	targetBody = @/targetBody1
	DATA
    {
        type = Vessel
        requiredValue = false
		uniquenessCheck = CONTRACT_ALL
        LSTarget = AllVessels().Where(v => v.CrewCount()>0 && v.IsLanded() && v.VesselType() == Base).Random()
    }
    DATA
	{
        type = Location
		vesselLocation = @LSTarget.Location()	
		hidden = true
    }
	DATA
	{
        type = CelestialBody
		requiredValue = true
		targetBody1 = @/LSTarget.CelestialBody()
		hidden = true
    }
	BEHAVIOUR
    {
        name = WaypointGenerator
		type = WaypointGenerator
		WAYPOINT
        {    name = Base
		     targetBody = @/targetBody1
			 icon = balloon
			 altitude = 0.0
			 latitude = @/vesselLocation.Latitude()
			 longitude = @/vesselLocation.Longitude()
        }
    }
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
		title = This requires a new Vessel
	}
	
	PARAMETER:NEEDS[TACLifeSupport]
	{
	    name = Self-Sufficiency
		type = PartValidation
		title = Have at least 2 TACLS resource converters
	    partModule = TacGenericConverter
		minCount = 2		
	}
	PARAMETER:NEEDS[USILifeSupport]
	{
		name = Self-Sufficiency
		type = Any
		
		title = Have at least one life support recycler, cultivator, or agroponics unit
		PARAMETER
		{	// latest and greatest USI format a greenhouse module
			name = swap-converter
			type = PartValidation
		
			FILTER
			{
				MODULE
				{
					name = USI_ConverterSwapOption
					
					// don't restrict inputs to allow different types of greenhouse modules
					OUTPUT_RESOURCE
					{
						ResourceName = Supplies
					}
				}
			}
		}		
		PARAMETER
		{	// latest and greatest USI format for a recycler
			name = swap-recycler
			type = PartValidation
		
			FILTER
			{
				MODULE
				{
					name = USILS_LifeSupportRecyclerSwapOption
				}
			}
		}		

		PARAMETER
		{
			name = usi-converter
			type = PartValidation
		
			FILTER
			{
				MODULE
				{
					name = ModuleResourceConverter_USI
					
					// don't restrict inputs to allow different types of recycler/greenhouse modules
					OUTPUT_RESOURCE
					{
						ResourceName = Supplies
					}
				}
			}
		}		

		PARAMETER
		{
			// legacy is still used by some mods with outdated USI-LS compatibility patches
			name = legacy-converter
			type = PartValidation
		
			FILTER
			{
				MODULE
				{
					name = ModuleResourceConverter
					
					INPUT_RESOURCE
					{
						ResourceName = Mulch
					}
					OUTPUT_RESOURCE
					{
						ResourceName = Supplies
					}
				}	
			}
		}
		
		PARAMETER
		{
			name = kpbs-converter
			type = PartValidation
		
			FILTER
			{
				MODULE
				{
					name = ModuleKPBSConverter
					
					// don't restrict inputs to allow different types of recycler/greenhouse modules
					OUTPUT_RESOURCE
					{
						ResourceName = Supplies
					}
				}
			}
		}		
	}
	PARAMETER:NEEDS[Snacks]
	{
		name = Self-Sufficiency
		type = Any
		
		title = Have at least one Snack Processor or Soil Recycler
		
		PARAMETER
		{
			name = SnackProcessorCheck
			type = PartValidation
			
			FILTER
			{
				MODULE
				{
					name = SnackProcessor
					OUTPUT_RESOURCE
					{
						ResourceName = Snacks
					}
				}
			}
		}
		
		PARAMETER
		{
			name = SoilRecyclerCheck
			type = PartValidation
			
			FILTER
			{
				MODULE
				{
					name = SoilRecycler
					OUTPUT_RESOURCE
					{
						ResourceName = Snacks
					}
				}
			}
		}
		
		PARAMETER
		{
			name = PlanetaryGreenhouseCheck
			type = PartValidation
			
			FILTER
			{
				MODULE
				{
					name = PlanetaryGreenhouse
					OUTPUT_RESOURCE
					{
						ResourceName = Snacks
					}
				}
			}
		}
	}
	PARAMETER
    {
        name = VisitWaypoint
		type = VisitWaypoint
		index = 0
		distance = 2000.0
		title = Land near @/LSTarget 
	}
	REQUIREMENT:NEEDS[TACLifeSupport]
    {
        name = PartModuleUnlocked
        type = PartModuleUnlocked
		checkOnActiveContract = false
        partModule = TacGenericConverter
    }
	REQUIREMENT:NEEDS[LifeSupport]
    {
        name = PartUnlocked
        type = PartUnlocked
		checkOnActiveContract = false
		part = USILS_Greenhouse
    }
	REQUIREMENT:NEEDS[Snacks]
    {
        name = PartModuleUnlocked
        type = PartModuleUnlocked
		checkOnActiveContract = false
		partModule = SnackProcessor
    }
	REQUIREMENT:NEEDS[Snacks]
    {
        name = PartModuleUnlocked
        type = PartModuleUnlocked
		checkOnActiveContract = false
		partModule = SoilRecycler
    }
	REQUIREMENT
	{
		name = Scanner
		type = Expression
		checkOnActiveContract = false
		expression = (!@/targetBody1.IsHomeWorld())
		title = Base must not be on the homeworld
	}
}
