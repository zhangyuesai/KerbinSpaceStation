@CONTRACT_TYPE[StationCoreCombined]:NEEDS[Kopernicus]
{
	@PARAMETER[NewStation]
	{
		@PARAMETER[LKO]
		{
			%maxAltitude = @/targetBody1.IsSun() ? 113549713200 : @/targetBody1.SpaceAltitudeThreshold()
		}
	}
}
CONTRACT_TYPE
{
	name = StationCoreCombined
	group = BasesandStations
	title = Launch the @/targetBody1 Space Station!
	genericTitle = Launch a New Space Station
	description = In order to aid our efforts of exploring @/targetBody1 we'd like you to launch a space station.
	genericDescription = We'd like you to deploy a new space station.
	synopsis = Launch the @/targetBody1 Space Station!
	completedMessage = Station Complete!
	
	// Contract min/max expiry in days.
	minExpiry = 1
	maxExpiry = 7
	// Contract can be cancelled and declined.
	cancellable = true
	declinable = true
	targetBody = @/targetBody1

	maxSimultaneous = 3
		
	// Contract rewards - no science random other rewards.
	rewardScience = 0
	rewardReputation = Random(1.0, 10.0)
	rewardFunds = Random(100000.0, 150000.0)
	failureReputation = Random(1.0, 100.0)
	failureFunds = 50000.0
	advanceFunds = 50000.0

	// Failsafe Data.
	DATA
	{
		type = List<Vessel>
		requiredValue = false
		stations = AllVessels().Where(v => v.VesselType() == Station)
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE
		targetBody1 = OrbitedBodies().Where(body => @/stations.Where(v => v.CelestialBody() == body).Count() == 0).SelectUnique()
		//targetBody1 = Kerbin
		title = Must have orbited a Celestial Body, but not have any stations deployed.
	}


	//Checks all vessel parameters are correct
	PARAMETER
	{
		name = NewStation
		type = VesselParameterGroup
		title = Launch a new Station Core into the specified orbit around @/targetBody1.
		notes = The station must include 1 Docking Port and support 4 Kerbals.	This can be done in one launch, or multiple launches.

		//Checks station is in orbit
		PARAMETER
		{
			name = LKO
			type = Orbit
			
			targetBody = @/targetBody1
			situation = ORBITING
			maxAltitude = @/targetBody1.IsSun() ? 113549713200 : @/targetBody1 == Gilly ? 16000 : @/targetBody1.SpaceAltitudeThreshold()
		}

		//Check for a Docking Port
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			
			partModule = ModuleDockingNode
			minCount = 1
		}
		
		//Check for crew capacity
		PARAMETER
		{
			name = HabModuleChild
			type = HasCrewCapacity
			title = Support 4 Kerbals
			
			minCapacity = 4
			
		}
		
		//Checks that vessel can generate power, accepts solar panels or RTGs
		PARAMETER
		{
			name = RTGSolar
			type = Any
			title = Have one of the following power generators

			PARAMETER
			{
				name = PartValidationSolar
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
				
			PARAMETER
			{
				name = PartValidationRTG
				type = PartValidation
				title = 1 or more generators
				hideChildren = true
				
				partModule = ModuleGenerator
				minCount = 1
			}
			
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidationNearFutureSolar
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
			
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNearFutureReactors
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = true
				partModule = FissionReactor
				minCount = 1
			}
			
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNearFutureRTGs
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = true
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}
			
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidationSolar
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}
		// checks for sspxr station core
		PARAMETER:NEEDS[StationPartsExpansionRedux]
		{
			name = PartValidationSSPX
			type = All
			title = Include a station core and a habitat

			PARAMETER
			{
				name = PartValidationStationCore
				type = PartValidation
				title = Include a station core from Station Parts Expansion
				hideChildren = true
			
				part = sspx-core-125-1
				part = sspx-core-1875-1
				part = sspx-core-25-1
				part = sspx-core-375-1
				part = sspx-core-5-1
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidHab
				type = Any
				title = Include one of the following habitat modules

				PARAMETER
				{
					name = PartValidationHab
					type = PartValidation
					title = A PPD-10 Hitchhiker Storage Container
					hideChildren = true

					part = crewCabin
					minCount = 1
				}
				PARAMETER
				{
					name = PartValidationHab
					type = PartValidation
					title = A habitat module from Station Parts Expansion
					hideChildren = true

					part = sspx-habitation-125-1		
					part = sspx-inflatable-centrifuge-125-1
					part = sspx-inflatable-centrifuge-125-2					
					part = sspx-inflatable-hab-125-1
					part = sspx-inflatable-hab-125-2
					part = sspx-inflatable-hab-125-3
					part = sspx-habitation-1875-1
					part = sspx-habitation-1875-2
					part = sspx-habitation-25-1
					part = sspx-inflatable-centrifuge-25-1
					part = sspx-inflatable-hab-25-1
					part = sspx-inflatable-hab-25-2
					part = sspx-habitation-375-1
					part = sspx-habitation-375-2
					part = sspx-habitation-375-3
					part = sspx-expandable-centrifuge-375-1
					part = sspx-expandable-centrifuge-375-2
					part = sspx-habitation-5-1
					part = sspx-habitation-5-2
					part = sspx-expandable-centrifuge-5-1
					minCount = 1
				}
				PARAMETER:NEEDS[TokamakIndustries]
				{
					name = PartValidationHabTokamak
					type = PartValidation
					title = A habitat module from Tokamak Industries
					hideChildren = true

					part = iberico_hab101R
					part = iberico_hab202
					part = iberico_hab202R
					part = iberico_hab303
					part = iberico_hab303R
					part = iberico_hab506
					part = iberico_hab602
					part = TIinflato1
					part = TIinflato2
					part = TIinflatoFlat
					part = TIorbitalorb
					minCount = 1						
				}
			}
		}
	}
	PARAMETER
	{
		name = Any
		type = Any

		//OPTIONAL Checks for cupola
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			title = Include a stock cupola (optional)
			optional = true
			hideChildren = true
			
// Can add multiple "part" lines here will match on ANY of them
			part = cupola
			minCount = 1
		}
		PARAMETER:NEEDS[StationPartsExpansionRedux]
		{
			name = PartValidation
			type = PartValidation
			title = Include a cupola from Station Parts Expansion (optional)
			optional = true
			hideChildren = true

			part = sspx-dome-cupola-5-1
			part = sspx-cupola-greenhouse-125-1
			part = sspx-observation-25-1
			part = sspx-cupola-125-1
			part = sspx-cupola-375-1
			part = sspx-cupola-1875-1

			minCount = 1
		}


		PARAMETER:NEEDS[HabTech2]
		{
			name = PartValidation
			type = PartValidation
			title = Include a cupola from HabTech2 (optional)
			optional = true
			hideChildren = true
			
// Can add multiple "part" lines here will match on ANY of them
			part = ht2_moduleCupola

			minCount = 1

		}
		PARAMETER:NEEDS[PlanetaryBaseInc]
		{
			name = PartValidation
			type = PartValidation
			title = Include a cupola from Planetary Base Inc (optional)
			optional = true
			hideChildren = true
			
// Can add multiple "part" lines here will match on ANY of them
			part = KKAOSS_Cupola_g
			minCount = 1
		}

		PARAMETER:NEEDS[TokamakIndustries]
		{
			name = PartValidation
			type = PartValidation
			title = Include a cupola from Tokamak Industries(optional)

			part = iberico_porcupola
			part = iberico_hab303R
			minCount = 1
		}

		PARAMETER:NEEDS[Tantares]
		{
			name = PartValidation
			type = PartValidation
			title = Include a cupola from Tantares (optional)
			optional = true
			hideChildren = true
			
// Can add multiple "part" lines here will match on ANY of them
			part = nashira_cupola_s1_1
			minCount = 1
		}


		
		//Checks for Supplies (USI Life Support)
		PARAMETER:NEEDS[USILifeSupport]
		{
			name = Supplies
			type = HasResource
			title = Have Supplies on board your vessel
			
			resource = Supplies
			minQuantity = 1
		}
		
		//OPTIONAL Checks for science labs from various mods
		PARAMETER
		{
			name = ScienceModuleValidation
			type = Any
			optional = true
			completeInSequence = true
			
			PARAMETER
			{
				name = ScienceLab
				type = PartValidation
				title = Include a Mobile Processing Lab MPL-LG-2
				rewardFunds = 75000.0
				hideChildren = true
				
				partModule = ModuleScienceLab
			}

			PARAMETER:NEEDS[StationScience]
			{
				name = PartValidation
				type = PartValidation
				title = Include a TH-NKR Research Lab
				rewardFunds = 85000.0
				hideChildren = true
				
				part = StnSciLab
			}
			
			PARAMETER:NEEDS[Kerbalism]
			{
				name = PartValidation
				type = PartValidation
				title = Include a Science Laboratory
				rewardFunds = 75000.0
				hideChildren = true

				partModule = Laboratory
			}
		}
		
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			
			vesselType = Station
		}
	
	}

	//Begins a 2-day countdown. Station must be in orbit for 2 days for contract to complete
	PARAMETER
	{
		name = Duration
		type = Duration
		duration = 2d
		preWaitText = Orbit time required:
		waitingText = Time to completion: 
		completionText = You survived!
		startCriteria = PARAMETER_COMPLETION
		parameter = NewStation
	}
	
	
	REQUIREMENT
	{
		name = PartModuleUnlocked
		type = PartModuleUnlocked

		partModule = ModuleDockingNode
	}

	REQUIREMENT
	{
		name = Any
		type = Any
	
		REQUIREMENT
		{
			name = PartModuleUnlocked
			type = PartModuleUnlocked
			
			partModule = ModuleDeployableSolarPanel
		}
		
		REQUIREMENT:NEEDS[Kopernicus]
		{
			name = PartModuleUnlocked
			type = PartModuleUnlocked
		
			partModule = KopernicusSolarPanel
		}
		
		REQUIREMENT:NEEDS[NearFutureSolar]
		{
			name = PartModuleUnlocked
			type = PartModuleUnlocked
			
			partModule = ModuleCurvedSolarPanel
		}	
	}
	
	// REQUIREMENT
	// {
		// name = CompleteContract
		// type = CompleteContract
		// contractType = StationCore
		// minCount = 0
		// checkOnActiveContract = false
		// cooldownDuration = 5d
		// title = Must not have completed this contract in the last 5 days.
	// }

	REQUIREMENT
	{
		name = PartUnlocked
		type = PartUnlocked
		
		part = crewCabin
	}
	
	REQUIREMENT
	{
		name = SunCheck
		type = Expression
		expression = !@/targetBody1.IsSun()
		title = Target body must not be the Sun
	}
}
	
